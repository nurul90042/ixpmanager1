log stderr all;

router id 172.30.201.110;

listen bgp address 172.30.201.110;

protocol device { }

protocol static static_bgp {

    ## Routes for testing route server inbound tagging:

    # prefix too long - tagged: IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG ( routeserverasn, 1101, 1 )
    route 10.90.80.0/25 reject;

    # martians - tagged: IXP_LC_FILTERED_BOGON ( routeserverasn, 1101, 3
    route 192.168.0.0/16 reject;
    route 192.168.10.0/24 reject;

    # Peer ASN == route's first ASN? We'll use this in the export filter.
    # Should be tagged: IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS / ( routeserverasn, 1101, 7 )
    route 134.226.0.0/16 reject;

    # Prevent BGP NEXT_HOP Hijacking. We'll use this in the export filter.
    # Should be tagged: IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP / ( routeserverasn, 1101, 8 )
    route 136.201.0.0/16 reject;

    # Filter Known Transit Networks
    # Should be tagged: IXP_LC_FILTERED_TRANSIT_FREE_ASN / ( routeserverasn, 1101, 14 )
    route 136.206.0.0/16 reject;

    # Belt and braces: no one needs an ASN path with > 64 hops, that's just broken
    # Should be tagged: IXP_LC_FILTERED_AS_PATH_TOO_LONG / ( routeserverasn, 1101, 5 )
    route 137.43.0.0/16 reject;

    # Belt and braces: must have at least one ASN in the path
    # Should be tagged: IXP_LC_FILTERED_AS_PATH_TOO_SHORT / ( routeserverasn, 1101, 6 )
    route 140.203.0.0/16 reject;

    # Ensure origin ASN is in the neighbors AS-SET
    # Should be tagged: IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED / ( routeserverasn, 1101, 10 )
    route 143.239.0.0/16 reject;


    # RPKI Valid - this (at time of writing, Jan 2019) passes with RPKI valid
    # and information community: IXP_LC_INFO_RPKI_VALID = ( routeserverasn, 1000, 1  )
    route 147.252.0.0/16 reject;

    # RPKI Invalid - this (at time of writing, Jan 2019) has an RPKI entry for another ASN
    # and so we expect: IXP_LC_FILTERED_RPKI_INVALID ( routeserverasn, 1101, 13 )
    route 178.49.148.0/24 reject;

    # For testing, we need a prefix that will be RPKI unknown (and for which we will
    # fake the origin ASN below). This should then pass through to the IRRDB prefix
    # filter and be blocked.
    # Should be tagged: IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED = ( routeserverasn, 1101, 9  )
    route 185.1.6.0/24 reject;
}

protocol bgp {
    import none;

    export filter {

        # Peer ASN == route's first ASN? We'll use this in the export filter.
        # Should be tagged: IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS / ( routeserverasn, 1101, 7  )
        if net ~ [ 134.226.0.0/16 ] then {
            bgp_path.prepend(1214);
            accept;
        }

        # Prevent BGP NEXT_HOP Hijacking. We'll use this in the export filter.
        # Should be tagged: IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP / ( routeserverasn, 1101, 8  )
        if net ~ [ 136.201.0.0/16 ] then {
            bgp_next_hop = 172.30.201.136;
            accept;
        }

        # Filter Known Transit Networks
        # Should be tagged: IXP_LC_FILTERED_TRANSIT_FREE_ASN / ( routeserverasn, 1101, 14 )
        if net ~ [ 136.206.0.0/16 ] then {
            bgp_path.prepend(2914);
            bgp_path.prepend(1213);
            accept;
        }

        # Belt and braces: no one needs an ASN path with > 64 hops, that's just broken
        # Should be tagged: IXP_LC_FILTERED_AS_PATH_TOO_LONG / ( routeserverasn, 1101, 5 )
        if net ~ [ 137.43.0.0/16 ] then {
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213); bgp_path.prepend(1213);
            accept;
        }

        # Belt and braces: must have at least one ASN in the path
        # Should be tagged: IXP_LC_FILTERED_AS_PATH_TOO_SHORT / ( routeserverasn, 1101, 6 )
        if net ~ [ 140.203.0.0/16 ] then {
            bgp_path.empty;
            accept;
        }


        # Ensure origin ASN is in the neighbors AS-SET
        # Should be tagged: IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED / ( routeserverasn, 1101, 10 )
        if net ~ [ 143.239.0.0/16 ] then {
            bgp_path.empty;
            bgp_path.prepend(2918);
            bgp_path.prepend(1213);
            accept;
        }




        # For testing, we need a prefix that will be RPKI unknown (and for which we will
        # fake the origin ASN). This should then pass through to the IRRDB prefix
        # filter and be blocked.
        # Should be tagged: IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED = ( routeserverasn, 1101, 9  )
        if net ~ [ 185.1.69.0/24 ] then {
            bgp_path.empty;
            bgp_path.prepend(2128);
            bgp_path.prepend(1213);
            accept;
        }

        # Test for standard IX filtering
        #if net ~ [ 147.252.0.0/16 ] then {
            #bgp_community.add( (0,42) );
            #bgp_large_community.add( ( 65500, 0, 42 ) );
        #}

        # Test for standard IX filtering - prepends
        #if net ~ [ 147.252.0.0/16 ] then {
        #    bgp_large_community.add( ( 65500, 101, 112 ) );
        #}

        if proto = "static_bgp" then accept;

        reject;
    };

    local as 1213;
    neighbor 172.30.201.30 as 65500;
    password "N7rX2SdfbRsyBLTm";
}
